name: CI for Monorepo

on:
  push:
    branches:
      - main
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js Environment
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Set up GoLang Environment
        uses: actions/setup-go@v2
        with:
          go-version: '1.23'

      - name: Install Node.js Dependencies
        run: |
          npm install -g turbo
          npm install

      - name: Install GoLang Dependencies
        run: |
          cd backend/service2
          go mod tidy

      - name: Configure Resources in Docker
        run: |
          cd scripts/
          chmod +x resource.sh
          ./resource.sh
      
      - name: Start Turbo Dev
        run: |
          turbo build
          turbo dev &  # Run in background
          echo $! > turbo_dev.pid  # Save the PID to a file

      - name: Run Tests in /packages/test
        run: |
          cd packages/test
          npm run test

      - name: Stop Turbo Dev
        run: |
          if [ -f turbo_dev.pid ]; then
            kill $(cat turbo_dev.pid) || echo "Process already stopped"
            rm turbo_dev.pid
          fi

      - name: Cleanup Resources
        run: |
          cd scripts/
          chmod +x cleanup.sh
          ./cleanup.sh

      - name: Build Docker Images
        run: |
          docker build -f docker/service1/Dockerfile -t probo-service1-image .
          docker build -f docker/service2/Dockerfile -t probo-service2-image .
      
      - name: Manually Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      
      - name: Test Docker Images with Docker Compose
        run: |
          docker-compose up --build &  # Run in background
          echo $! > compose_dev.pid  # Save the PID to a file

      - name: Run Tests in /packages/test for docker compose
        run: |
          cd packages/test
          npm run test

      - name: Stop Docker compose
        run: |
          if [ -f compose_dev.pid ]; then
            kill $(cat compose_dev.pid) || echo "Process already stopped"
            rm compose_dev.pid
          fi
      
      - name: Push Docker Images to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push probo-service1-image
          docker push probo-service2-image
      